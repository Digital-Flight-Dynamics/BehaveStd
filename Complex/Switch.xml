<?xml version="1.0" encoding="UTF-8"?>

<ModelBehaviors>
	<InputEvent ID="Beh_SwitchEvent">
		<Presets>
			<Preset ID="#Name#_Preset">
				<Parameters Type="Override">
					<Switch Param="Type">
						<Case Value="Rotary">
							<Icon>ROTATE</Icon>
							<Interaction>X_AXIS</Interaction>
							<InteractionLockable>X_AXIS</InteractionLockable>
						</Case>
						<Case Value="Horizontal">
							<Icon>MOVE_X</Icon>
							<Interaction>X_AXIS</Interaction>
							<InteractionLockable>X_AXIS</InteractionLockable>
						</Case>
						<Case Value="Vertical">
							<Icon>MOVE_Y</Icon>
							<Interaction>Y_AXIS</Interaction>
							<InteractionLockable>Y_AXIS</InteractionLockable>
						</Case>
					</Switch>
				</Parameters>

				<Tooltip>
					<Icon>#Icon#</Icon>
					<Interaction>#Interaction#</Interaction>
					<InteractionLockable>#InteractionLockable#</InteractionLockable>
					<TTDescription RPN="True">#TooltipDescription#</TTDescription>
					<TTValue RPN="True">#TooltipValue#</TTValue>
				</Tooltip>
				<Value>
					<Init>#DefaultPosition# d (&gt;O:SwitchPosition) #OnChange#</Init>
					<Units>Enum</Units>
					<Code>(O:SwitchPosition)</Code>
				</Value>
				<Inc>
					<Code>0</Code>
					<Parameters>
						<Param Type="Int" RPN="True">0</Param>
					</Parameters>
				</Inc>
				<Dec>
					<Code>0</Code>
					<Parameters>
						<Param Type="Int" RPN="True">0</Param>
					</Parameters>
				</Dec>
				<Set>
					<Code>p0 d (&gt;O:SwitchPosition) #OnChange#</Code>
					<Parameters>
						<Param Type="Int" RPN="True">p0</Param>
					</Parameters>
					<Bindings>
						<Loop>
							<Setup>
								<Param>ID</Param>
								<From>0</From>
								<Inc>1</Inc>
								<While>
									<Arg NotEmpty="Event#ID#"/>
								</While>
							</Setup>
							<Do>
								<Parameters Type="Override" Lifetime="Iteration">
									<Event Process="Param">Event#ID#</Event>
									<Set Process="Param">Set#ID#</Set>
								</Parameters>

								<Binding EventID="#Event#">
									<Param RPN="True">#Set#</Param>
								</Binding>
							</Do>
						</Loop>
					</Bindings>
				</Set>
			</Preset>
		</Presets>
	</InputEvent>

	<!-- A linear or rotary switch with a limited number of positions. -->
	<Template Name="Beh_Switch">
		<Parameters Type="Default">
			<!-- The name of the component to create. -->
			<Name/>
			<!-- The GLTF node of the push button. If it is not given, `Name` will be used. -->
			<Node/>
			<!--
				The name of the animation in your GLTF file(s).
				If it is not given, `Node` will be used.
			-->
			<AnimName/>
			<!-- RPN code to generate the title of the tooltip -->
			<TooltipTitle/>
			<!-- RPN code to generate the tooltip's description. -->
			<TooltipDescription/>
			<!-- RPN code to generate the tooltip's value. -->
			<TooltipValue/>
			<!--
				Code to set the value of the switch's position.
				Will be set with values in the range [0, `Positions`).
				The value will be on the stack, and is expected to be popped.
				0 -> leftmost/bottommost position.
			-->
			<OnChange/>
			<!-- The number of positions of the switch. -->
			<Positions/>
			<!--
				The type of switch:
				Rotary: The switch is a rotary switch.
				Horizontal: The switch is a horizontal switch.
				Vertical: The switch is a vertical switch.
			-->
			<Type/>
			<!-- The default position of the switch on startup. -->
			<DefaultPosition>0</DefaultPosition>
			<!-- If the switch should wrap around. -->
			<Wrap>False</Wrap>
			<!-- The time that moving from one position to another should take, in seconds. -->
			<AnimTime>0.25</AnimTime>
			<!-- If highlighting the hovered GLTF node should be disabled. -->
			<DisableHighlight>False</DisableHighlight>
			<!--
				The node to highlight if DisableHighlight is False.
				If this is not set, the node of the component this is placed on is used.
			-->
			<HighlightNode/>
			<!--
				Parameters `EventN` and `CheckN` are used to specify the key events to bind to.
				N must start from 0.
				`EventN`: The name of the event to bind to.
				`SetN`: Should return the switch position to set when `EventN` is received.
				          It can access the event parameters (`pN`).
			-->
		</Parameters>

		<Parameters Type="Override">
			<Condition Valid="Node">
				<False>
					<Node>#Name#</Node>
				</False>
			</Condition>
		</Parameters>

		<Parameters Type="Override">
			<Length Process="Int">100 #Positions# 1 - *</Length>
			<Lag Process="Int">100 #AnimTime# /</Lag>

			<Condition Valid="AnimName">
				<False>
					<AnimName>#Node#</AnimName>
				</False>
			</Condition>
		</Parameters>

		<Component ID="#Name#" Node="#Node#">
			<UseInputEvent ID="Beh_SwitchEvent"/>

			<UseTemplate Name="Beh_Interaction_Switch">
				<GetPos>(B:#Name#_Preset)</GetPos>
				<SetPos>(&gt;B:#Name#_Preset_Set)</SetPos>
			</UseTemplate>

			<UseTemplate Name="Beh_Animation_Code">
				<Name>#AnimName#</Name>
				<Code>(B:#Name#_Preset) 100 *</Code>
			</UseTemplate>
		</Component>
	</Template>
</ModelBehaviors>
