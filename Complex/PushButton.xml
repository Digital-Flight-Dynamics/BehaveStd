<?xml version="1.0" encoding="UTF-8"?>

<ModelBehaviors>
	<InputEvent ID="Beh_PushEvent">
		<Presets>
			<Preset ID="#Name#_Preset">
				<Tooltip>
					<Icon>PUSH</Icon>
					<Interaction>PRIMARY_DOWN</Interaction>
					<InteractionLockable>LOCK</InteractionLockable>
					<TTDescription RPN="True">#TooltipDescription#</TTDescription>
					<TTValue RPN="True">#TooltipValue#</TTValue>
				</Tooltip>
				<Value>
					<Units>Bool</Units>
					<Code>0</Code>
					<Init>#Init# (&gt;B:#Name#_Preset_Set)</Init>
				</Value>
				<Inc>
					<Code>0</Code>
					<Parameters>
						<Param Type="Float">0</Param>
					</Parameters>
				</Inc>
				<Dec>
					<Code>0</Code>
					<Parameters>
						<Param Type="Float">0</Param>
					</Parameters>
				</Dec>
				<Set>
					<Code>
						p0 if{
							(O:AnimValue) ! (&gt;O:AnimValue)
							#OnPush#
						}
					</Code>
					<Parameters>
						<Param Type="Bool" RPN="True">p0</Param>
					</Parameters>
					<Bindings>
						<Loop>
							<Setup>
								<Param>ID</Param>
								<From>0</From>
								<Inc>1</Inc>
								<While>
									<Arg NotEmpty="Event#ID#"/>
								</While>
							</Setup>
							<Do>
								<Parameters Type="Override" Lifetime="Iteration">
									<Event Process="Param">Event#ID#</Event>
									<Check Process="Param">Check#ID#</Check>
								</Parameters>

								<Binding EventID="#Event#">
									<Param RPN="True">#Check#</Param>
								</Binding>
							</Do>
						</Loop>
					</Bindings>
				</Set>
			</Preset>
		</Presets>
	</InputEvent>

	<Template Name="Beh_PushButton">
		<Parameters Type="Default">
			<!-- The name of the component to create. -->
			<Name/>
			<!-- The GLTF node of the push button. If it is not given, `Name` will be used. -->
			<Node/>
			<!--
				The name of the animation in your GLTF file(s).
				The first keyframe should be in the 'out' position.
				The middle keyframe should be in the 'in' position.
				The last keyframe should be in the 'out' position.

				If it is not given, `Node` will be used.
			-->
			<AnimName/>
			<!-- The name of the Wwise sound event to use on push in. -->
			<SoundEventIn/>
			<!-- The name of the Wwise sound event to use on push out. -->
			<SoundEventOut/>
			<!-- RPN code to generate the title of the tooltip -->
			<TooltipTitle>'INOP'</TooltipTitle>
			<!-- RPN code to generate the tooltip's description. -->
			<TooltipDescription>'Inoperative'</TooltipDescription>
			<!-- RPN code to generate the tooltip's value. -->
			<TooltipValue>'N/A'</TooltipValue>
			<!-- RPN code to run on push. -->
			<OnPush/>
			<!-- The initial value. -->
			<Init>0</Init>
			<!-- The time that the entire animation (in and out) should take, in seconds. -->
			<AnimTime>0.25</AnimTime>
			<!-- If highlighting the hovered GLTF node should be disabled. -->
			<DisableHighlight>False</DisableHighlight>
			<!--
				The node to highlight if DisableHighlight is False.
				If this is not set, the node of the component this is placed on is used.
			-->
			<HighlightNode/>
			<!--
				Parameters `EventN` and `CheckN` are used to specify the key events to bind to.
				N must start from 0.
				`EventN`: The name of the event to bind to.
				`CheckN`: Should return whether the button should be pushed when `EventN` is received.
				          It can access the event parameters (`pN`).
			-->
		</Parameters>

		<Parameters Type="Override">
			<Condition Valid="Node">
				<False>
					<Node>#Name#</Node>
				</False>
			</Condition>
			<Lag Process="Int">100 #AnimTime# /</Lag>
			<Condition Valid="Tooltip">
				<False>
					<Tooltip>#Name#_Preset</Tooltip>
				</False>
			</Condition>
		</Parameters>

		<Parameters Type="Override">
			<Condition Valid="AnimName">
				<False>
					<AnimName>#Node#</AnimName>
				</False>
			</Condition>
		</Parameters>

		<Component ID="#Name#" Node="#Node#">
			<UseInputEvent ID="Beh_PushEvent"/>

			<UseTemplate Name="Beh_Interaction_Click">
				<OnClick>
					1 (&gt;B:#Name#_Preset_Set)
				</OnClick>
			</UseTemplate>

			<UseTemplate Name="Beh_Animation_Code">
				<Name>#AnimName#</Name>
				<Code>(O:AnimValue) 100 *</Code>
				<Length>100</Length>
			</UseTemplate>

			<AnimationTriggers Animation="#AnimName#">
				<EventTrigger Count="1" Direction="Forward">
					<SoundEvent WwiseEvent="#SoundEventIn#" Action="Play"/>
				</EventTrigger>
				<EventTrigger Count="1" Direction="Backward">
					<SoundEvent WwiseEvent="#SoundEventOut#" Action="Play"/>
				</EventTrigger>
			</AnimationTriggers>
		</Component>
	</Template>
</ModelBehaviors>
